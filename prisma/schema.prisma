// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Pode ter vários treinos através da tabela intermediária
model User {
  id String @id
  fullName String @db.VarChar(255)
  username String @unique @db.VarChar(255)
  role String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workouts UserWorkout[]
}

model Workout {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users UserWorkout[]
  exercises Exercise[]
}

model Exercise {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  sets_X_reps String @db.VarChar(255)
  notes String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workoutId Int
  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
}

// Faz a relação entre usuários e treinos, permitindo que um treino seja compartilhado entre vários usuários.
model UserWorkout {
  userId String
  workoutId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@id([userId, workoutId])
}